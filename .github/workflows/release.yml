name: Release

on:
  push:
    branches:
      - main # Trigger workflow on push to the main branch

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true   

    # Create empty directory crates
    - name: Create crates directory
      run: |
        mkdir crates
        cd crates
        git "Initial
        touch README.md
        git add README.md
        git commit -m "Initial commit"
        cd ..        

    # Checkout Ktra
    - name: Checkout Ktra
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: patrickoppel/ktra
        path: ktra

    # Run Ktra
    - name: Build Ktra
      run: |
        echo "
        [index_config]
        remote_url = 'https://github.com/Cube-OS/crates.git'
        local_path = '../crates'
        https_username = 'x-access-token'
        https_password = '${{ secrets.GITHUB_TOKEN }}'
        branch = 'main'
        " > ./ktra/ktra.toml
        cd ktra
        cargo run
        cd ..

    # Create new user for Ktra
    - name: Create user for Ktra and login
      run: |
        TOKEN=$(curl -X POST -H 'Content-Type: application/json' -d '{"password":"PASSWORD"}' http://localhost:8000/ktra/api/v1/new_user/ALICE)
        cargo login --registry=ktra $TOKEN

    # Checkout this repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Build and test
    - name: Build and test
      run: |
        cargo build --release
        cargo test

    # Package
    - name: package
      run: cargo package

    # Get crate info
    - name: Get crate info
      id: crate_info
      run: |
        echo "::set-output name=VERSION::$(cargo read-manifest | jq -r .version)"
        echo "::set-output name=NAME::$(cargo read-manifest | jq -r .name)"

    # Upload package
    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.crate_info.outputs.NAME }}-${{ steps.crate_info.outputs.VERSION }}
        path: target/package/*.crate
    
    # - name: Get version
    #   id: get_version
    #   run: |
    #     VERSION=$(grep "^version" Cargo.toml | cut -d' ' -f3 | tr -d '"')
    #     echo "::set-output name=VERSION::${VERSION}"

    # Check if tag exists
    - name: Check if tag exists
      id: check_tag
      run: |
        TAG_NAME="v${{ steps.get_version.outputs.VERSION }}"
        HTTP_STATUS=$(curl --silent --head --location "https://github.com/$GITHUB_REPOSITORY/releases/tag/$TAG_NAME" | grep HTTP | cut -d ' ' -f2)
        if [ "$HTTP_STATUS" == "200" ]; then
          echo "::set-output name=EXISTS::true"
        else
          echo "::set-output name=EXISTS::false"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Create and push tag
    - name: Create and push tag
      if: steps.check_tag.outputs.EXISTS == 'false'
      run: |
        TAG_NAME="v${{ steps.get_version.outputs.VERSION }}"
        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        git tag $TAG_NAME
        git push origin ${{ env.TAG_NAME }}

    # Create Release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: steps.check_tag.outputs.EXISTS == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false

    # Upload Package to Release
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      if: steps.check_tag.outputs.EXISTS == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/package/${{ steps.crate_info.outputs.NAME }}-${{ steps.crate_info.outputs.VERSION }}.crate
        asset_name: ${{ steps.crate_info.outputs.NAME }}-${{ steps.crate_info.outputs.VERSION }}.crate
        asset_content_type: application/octet-stream