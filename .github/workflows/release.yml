name: Release

on:
  push:
    branches:
      - main # Trigger workflow on push to the main branch

jobs:
  release:
    # runs-on: ubuntu-20.04
    runs-on: ubuntu-latest

    steps:
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    # Checkout Code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ${{ github.event.repository.name }}

    # Get registry name and repo link
    - name: Get registry and repo
      run: |
        cd ${{ github.event.repository.name }}
        REGISTRY=$(awk -F'=' '/\[registries\]/ {getline; print $1}' .cargo/config.toml | tr -d ' ')
        REPO=$(grep -oP 'index = \K.*' .cargo/config.toml | tr -d '"' | awk -F/ '{print $(NF-1)"/"$NF}' | sed 's/\.git.*//')
        echo $REGISTRY
        echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV
        echo $REPO
        echo "REPO=$REPO" >> $GITHUB_ENV
        cd ..

    # Checkout Registry
    - name: Checkout Registry
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ env.REPO }}
        ref: main
        path: registry

    # Checkout Ktra
    - name: Checkout Ktra
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: patrickoppel/ktra
        ref: main
        path: ktra

    # Run Ktra
    - name: Build Ktra
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" > ./ktra/github_token.txt
        echo '
        [index_config]
        remote_url = "https://github.com/Cube-OS/crates.git"
        local_path = "${{ github.workspace }}/registry"
        https_username = "x-access-token"
        https_password = "'${{ secrets.GITHUB_TOKEN }}'"
        branch = "main"
        token_path = "./github_token.txt"
        ' > ./ktra/ktra.toml
        cd ktra
        cargo build
        mv ${{ github.workspace }}/ktra/target/debug/ktra ${{ github.workspace }}/ktra/ktra

    - name: Run Ktra
      run: |
        ${{ github.workspace }}/ktra/ktra &

    - name: Create user for ktra and login, then build and test
      run: |        
        sleep 5
        cd ${{ github.event.repository.name }}
        TOKEN=$(curl -X POST -H 'Content-Type: application/json' -d '{"password":"PASSWORD"}' http://localhost:8000/ktra/api/v1/new_user/ALICE)
        echo ${{ env.REGISTRY }}
        cargo login --registry=${{ env.REGISTRY }} "$TOKEN"
        cargo build --release
        cargo test
      continue-on-error: true

    # Package
    - name: package
      run: |
        cd ${{ github.event.repository.name }}
        cargo package

    # Get crate info
    - name: Get crate info
      id: crate_info
      run: |
        echo "{VERSION}=$(cargo read-manifest | jq -r .version)" >> $GITHUB_OUTPUT
        echo "{NAME}=$(cargo read-manifest | jq -r .name)" >> $GITHUB_OUTPUT

    # Upload package
    - name: Upload package
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.crate_info.outputs.NAME }}-${{ steps.crate_info.outputs.VERSION }}
        path: ${{ github.event.repository.name }}/target/package/*.crate
    
    # - name: Get version
    #   id: get_version
    #   run: |
    #     VERSION=$(grep "^version" Cargo.toml | cut -d' ' -f3 | tr -d '"')
    #     echo "::set-output name=VERSION::${VERSION}"

    # Check if tag exists
    - name: Check if tag exists
      id: check_tag
      run: |
        TAG_NAME="v${{ steps.crate_info.outputs.VERSION }}"
        HTTP_STATUS=$(curl --silent --head --location "https://github.com/$GITHUB_REPOSITORY/releases/tag/$TAG_NAME" | grep HTTP | cut -d ' ' -f2)
        if [ "$HTTP_STATUS" == "200" ]; then
          echo "{EXISTS}={true}" >> $GITHUB_OUTPUT
        else
          echo "{EXISTS}={false}" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Create and push tag
    - name: Create and push tag
      if: steps.check_tag.outputs.EXISTS == 'false'
      run: |
        TAG_NAME="v${{ steps.crate_info.outputs.VERSION }}"
        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        git tag $TAG_NAME
        git push origin ${{ env.TAG_NAME }}

    # Create Release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: steps.check_tag.outputs.EXISTS == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.crate_info.outputs.VERSION }}
        release_name: Release ${{ steps.crate_info.outputs.VERSION }}
        draft: false
        prerelease: false

    # Upload Package to Release
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      if: steps.check_tag.outputs.EXISTS == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/package/${{ steps.crate_info.outputs.NAME }}-${{ steps.crate_info.outputs.VERSION }}.crate
        asset_name: ${{ steps.crate_info.outputs.NAME }}-${{ steps.crate_info.outputs.VERSION }}.crate
        asset_content_type: application/octet-stream